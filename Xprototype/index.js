const person = {
    name: 'Maxim',
    age: 25,
    greet: function() {
        console.log('Greet!')
    }
}

const person1 = new Object ({// это равнозначная первой запись, но более классическая указывающая на то, что в любой создаваеый объект, кроме свойств нами заданных , попадают свойства главнонго класса в js объекта( Object) так называемые прототипы.
    name: 'Krab',
    age: 0.25,
    greeps: function() {
        console.log('Greeps!')
}
})

Object.prototype.sayHello = function() {//при создание соответстывенно у объекта некой функции , она автоматически попадает в прототипы любого как обьекта, так и строки.
    console.log('Hello !')
}

const Lena = Object.create(person)//кроме расширения прототипов функциями через главный класс js "Object" мы можем также передавать свойства из других имеющихся объектов, вновь созданным, через их прототипы, однако если функции передаваемого объекта будут работать сразу же, то вот другие свойства нужно будет, вызываемые через прототипы имеющихся объектов всетаки переопределить, ибо они будут соответствовать наследуемым значениям, что не верно.
Lena.name = 'Elena'
Lena.age = 28//  если это не сделать, то при отсутствии переопределения Lena.name(Lena.age) станет Максимом с возрастом Максима.

//прототипы передают свойства сверху -  вниз!!!!!

const str = 'I am string!'// при этом при создании переменнной в виде строки, прототипы Object также все передаются, если их вызывать, что свидетельствует о том, что в js даже строка является объектом.
const str1 = new String("i'm more than a string, i'm an object")// при создании же строки через очередной класс js " new String" строка становится оьъектом почти в явном виде, ибо хоть вместо строки и появляется объект, но он состоит из количества строк элементов строки.
